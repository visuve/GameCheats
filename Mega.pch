#pragma once

#include <algorithm>
#include <any>
#include <array>
#include <chrono>
#include <filesystem>
#include <format>
#include <fstream>
#include <functional>
#include <cstdint>
#include <iostream>
#include <iomanip>
#include <list>
#include <map>
#include <mutex>
#include <random>
#include <set>
#include <source_location>
#include <span>
#include <sstream>
#include <stdexcept>
#include <string_view>
#include <system_error>
#include <typeindex>
#include <regex>
#include <vector>

#include <Windows.h>
#include <TlHelp32.h>

using namespace std::chrono_literals;

template <typename T>
constexpr void Clear(T& x)
{
	auto begin = reinterpret_cast<uint8_t*>(&x);
	auto end = begin + sizeof(T);

	while (begin < end)
	{
		*begin = 0;
		++begin;
	}
}